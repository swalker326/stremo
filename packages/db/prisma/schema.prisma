datasource db {
  provider     = "postgresql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String
  email         String           @unique
  emailVerified DateTime?        @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  servers       ServerUser[] // Servers the user is part of
  ownedServers  Server[] // Servers the user owns
  messages      Message[]
  roles         ServerUserRole[] // Roles in different servers
}

model Server {
  id             String           @id @default(cuid())
  name           String
  rooms          Room[]
  ownerId        String
  owner          User             @relation(fields: [ownerId], references: [id])
  members        ServerUser[] // Users part of the server
  streams        Stream[]
  ServerUserRole ServerUserRole[]

  @@index([ownerId])
}

model Room {
  id       String    @id @default(cuid())
  name     String
  serverId String
  server   Server    @relation(fields: [serverId], references: [id])
  messages Message[]

  @@index([serverId])
}

model Message {
  id        String   @id @default(cuid())
  message   String
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([roomId])
}

model Stream {
  id       String @id @default(cuid())
  title    String
  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  @@index([serverId])
}

model Role {
  id    String           @id @default(cuid())
  name  String           @unique
  users ServerUserRole[] // Users assigned this role
}

model ServerUserRole {
  userId   String
  roleId   String
  serverId String
  user     User   @relation(fields: [userId], references: [id])
  role     Role   @relation(fields: [roleId], references: [id])
  server   Server @relation(fields: [serverId], references: [id])

  @@id([userId, roleId, serverId])
  @@index([userId])
  @@index([roleId])
  @@index([serverId])
}

model ServerUser {
  userId   String
  serverId String
  user     User   @relation(fields: [userId], references: [id])
  server   Server @relation(fields: [serverId], references: [id])

  @@id([userId, serverId])
  @@index([userId])
  @@index([serverId])
}
